# A series of plotting functions for diagnosing and studying posteriors generated by the mcmc class
import pandas as pd
from graphing import plotting
import matplotlib.pyplot as plt
plt.rcParams.update({
    "text.usetex": True,
    "font.family": "serif",
    "font.serif": ["Computer Modern Roman"]})

# Pandas is much faster than numpy at opening large text files

class posterior:

    def __init__(self, posteriorFile):
        #  Load posterior from file
        self.S12, self.S23, self.S13, self.dcp, self.logl, self.acceptance, self.steptime, self.nstep = pd.read_csv(posteriorFile,
                                                                                                   engine="pyarrow",
                                                                                                   delimiter=",").values.T
        self.true_values=None

    def burn(self, nsteps):
        self.S12 = self.S12[nsteps:]
        self.S23 = self.S23[nsteps:]
        self.S13 = self.S13[nsteps:]
        self.dcp = self.dcp[nsteps:]
        self.logl = self.logl[nsteps:]
        self.acceptance = self.acceptance[nsteps:]
        self.steptime = self.steptime[nsteps:]
        self.nstep = self.nstep[nsteps:]

    def plot_1D_pdfs(self):
        
        fig, ax = plt.subplots(nrows=2, ncols=2, dpi=400, figsize=(8, 8))
        n, bins, patches = ax[0, 0].hist(self.S12, bins=40, facecolor='#2ab0ff', edgecolor='#e0e0e0', linewidth=0.5,
                                         alpha=0.7, density=False)
        n = n.astype('int')  # it MUST be integer# Good old loop. Choose colormap of your taste
        for i in range(len(patches)):
            patches[i].set_facecolor(plotting.parula_map(n[i] / max(n)))

        n, bins, patches = ax[0, 1].hist(self.S23, bins=40, facecolor='#2ab0ff', edgecolor='#e0e0e0', linewidth=0.5,
                                         alpha=0.7, density=False)
        n = n.astype('int')  # it MUST be integer# Good old loop. Choose colormap of your taste
        for i in range(len(patches)):
            patches[i].set_facecolor(plotting.parula_map(n[i] / max(n)))
        n, bins, patches = ax[1, 0].hist(self.S13, bins=40, facecolor='#2ab0ff', edgecolor='#e0e0e0', linewidth=0.5,
                                         alpha=0.7, density=False)
        n = n.astype('int')  # it MUST be integer# Good old loop. Choose colormap of your taste
        for i in range(len(patches)):
            patches[i].set_facecolor(plotting.parula_map(n[i] / max(n)))

        n, bins, patches = ax[1, 1].hist(self.dcp, bins=40, facecolor='#2ab0ff', edgecolor='#e0e0e0', linewidth=0.5,
                                         alpha=0.7, density=False)
        n = n.astype('int')  # it MUST be integer# Good old loop. Choose colormap of your taste
        for i in range(len(patches)):
            patches[i].set_facecolor(plotting.parula_map(n[i] / max(n)))

        ax[0, 0].set_xlabel(r"$\sin^2\theta_{12}$")
        ax[0, 1].set_xlabel(r"$\sin^2\theta_{23}$")
        ax[1, 0].set_xlabel(r"$\sin^2\theta_{13}$")
        ax[1, 1].set_xlabel(r"$\delta_{CP}$")

        if self.true_values:
            ax[0, 0].axvline(self.true_values[0], color='r')
            ax[0, 1].axvline(self.true_values[1], color='r')
            ax[1, 0].axvline(self.true_values[2], color='r')
            ax[1, 1].axvline(self.true_values[3], color='r')

        for i in [0, 1]:
            for j in [0, 1]:
                ax[i, j].set_yticks([])
                ax[i, j].set_ylabel("P (arbitrary units)")
                ax[i, j].set_box_aspect(1)
                #ax[i, j].set_xlim(0, 1)
        #ax[1, 1].set_xlim(-np.pi, np.pi)
        plt.show()

    def set_asimov(self, s12, s23, s13, dcp):
        self.true_values = [s12, s23, s13, dcp]

    def plot_variations(self):

        fig, ax = plt.subplots(nrows=2, ncols=2, dpi=400, figsize=(8, 8))
        ax[0, 0].plot(self.S12, color='blue', linewidth=0.5)
        ax[0, 1].plot(self.S23, color='blue', linewidth=0.5)
        ax[1, 0].plot(self.S13, color='blue', linewidth=0.5)
        ax[1, 1].plot(self.dcp, color='blue', linewidth=0.5)

        for i in [0, 1]:
            for j in [0, 1]:
                ax[i, j].set_ylabel("Parameter variations")
                ax[i, j].set_box_aspect(1)
                #ax[i, j].set_ylim(0,1)
        #ax[1, 1].set_ylim(-np.pi, np.pi)

        if self.true_values:
            ax[0, 0].axhline(self.true_values[0], color='r')
            ax[0, 1].axhline(self.true_values[1], color='r')
            ax[1, 0].axhline(self.true_values[2], color='r')
            ax[1, 1].axhline(self.true_values[3], color='r')

        ax[0, 0].set_xlabel(r"$\sin^2\theta_{12}$")
        ax[0, 1].set_xlabel(r"$\sin^2\theta_{23}$")
        ax[1, 0].set_xlabel(r"$\sin^2\theta_{13}$")
        ax[1, 1].set_xlabel(r"$\delta_{CP}$")

        plt.show()

    def plot_acceptance(self):
        fig, ax = plt.subplots(nrows=1, ncols=1, dpi=400, figsize=(5, 5))
        ax.plot(self.acceptance, color='blue', linewidth=0.5)
        ax.set_ylabel('acceptance rate')
        ax.set_xlabel('number of steps')
        ax.set_box_aspect(1)
        plt.show()

    def plot_logL(self):
        fig, ax = plt.subplots(nrows=1, ncols=2, dpi=400, figsize=(10, 5))
        ax[0].plot(self.logl, color='blue', linewidth=0.5)
        ax[0].set_ylabel('LogL')
        ax[0].set_xlabel('number of steps')
        ax[0].set_box_aspect(1)
        n, bins, patches = ax[1].hist(self.logl, bins=40, facecolor='#2ab0ff', edgecolor='#e0e0e0', linewidth=0.5,
                                         alpha=0.7, density=False)
        n = n.astype('int')  # it MUST be integer# Good old loop. Choose colormap of your taste
        for i in range(len(patches)):
            patches[i].set_facecolor(plotting.parula_map(n[i] / max(n)))

        ax[1].set_xlabel('logL')
        ax[1].set_box_aspect(1)
        plt.show()